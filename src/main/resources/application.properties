server.port=8010
mybatis.mapperLocations=classpath:mapping/*.xml

#配置数据库链接等数据源
spring.datasource.name=dianpingdb
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/dianpingdb?serverTimezone=UTC&useUnicode=true&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=zxy201218..

#使用druid做链接池管理
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driverClassName=com.mysql.jdbc.Driver

#add-mappings=true表示如果所有的controller都没有命中，则使用默认的静态资源处理器做匹配
spring.resources.add-mappings=true
spring.mvc.throw-exception-if-no-handler-found=true

#接入前端静态资源页面
spring.mvc.static-path-pattern=/static/**

#thymeleaf相关的配置
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html


#admin官方账号的用户名和密码
admin.email=admin@imooc.com
admin.encryptPassword=4QrcOUm6Wau+VuBX8g+IPg==

#申明es服务地址
elasticsearch.ip=127.0.0.1:9200

#打印日志
logging.level.org.springframework.web.servlet.DispatcherServlet=debug



spring.redis.database=1
spring.redis.host=127.0.0.1
spring.redis.port=6379
spring.redis.jedis.pool.max-active=8
spring.redis.jedis.pool.max-wait=-1
spring.redis.jedis.pool.max-idle=8
spring.redis.jedis.pool.min-idle=0

mybatis.configuration.cache-enabled=true


spring.kafka.bootstrap-servers=47.94.195.172:9092
spring.kafka.producer.acks=1
spring.kafka.producer.batch-size=16384
spring.kafka.producer.retries=3
spring.kafka.producer.buffer-memory=33554432

# 指定消息key和消息体的编解码方式
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.group-id=default-group
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.listener.ack-mode=manual_immediate
# 当每一条记录被消费者监听器（ListenerConsumer）处理之后提交
# RECORD
# 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后提交
# BATCH
# 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，距离上次提交时间大于TIME时提交
# TIME
# 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，被处理record数量大于等于COUNT时提交
# COUNT
# TIME |　COUNT　有一个条件满足时提交
# COUNT_TIME
# 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后, 手动调用Acknowledgment.acknowledge()后提交
# MANUAL
# 手动调用Acknowledgment.acknowledge()后立即提交，一般使用这种
